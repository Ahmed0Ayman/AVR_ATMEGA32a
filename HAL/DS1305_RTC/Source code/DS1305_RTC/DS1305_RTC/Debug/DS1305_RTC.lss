
DS1305_RTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000742  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000036  00800060  00000742  000007b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000007ec  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000081c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  00000858  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bd6  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ac0  00000000  00000000  000025ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e09  00000000  00000000  0000306e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003c0  00000000  00000000  00003e78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009a3  00000000  00000000  00004238  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000d76  00000000  00000000  00004bdb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  00005951  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e4       	ldi	r30, 0x42	; 66
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 39       	cpi	r26, 0x96	; 150
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e9       	ldi	r26, 0x96	; 150
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 39       	cpi	r26, 0x96	; 150
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 1e 02 	call	0x43c	; 0x43c <main>
  8a:	0c 94 9f 03 	jmp	0x73e	; 0x73e <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <S7egment_Init>:



	
void S7egment_Init(Seg7_Handler *  Segment_Handler)
{
  92:	ef 92       	push	r14
  94:	ff 92       	push	r15
  96:	0f 93       	push	r16
  98:	1f 93       	push	r17
  9a:	cf 93       	push	r28
  9c:	df 93       	push	r29
  9e:	00 d0       	rcall	.+0      	; 0xa0 <S7egment_Init+0xe>
  a0:	1f 92       	push	r1
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
  a6:	7c 01       	movw	r14, r24
		GPIO_InitTypeDef  S7eg_PIN_CONFIG ;

	
	S7eg_PIN_CONFIG.mode = GPIO_MODE_OUTPUT ;
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	8a 83       	std	Y+2, r24	; 0x02
	S7eg_PIN_CONFIG.pull = GPIO_NOPULL ;
  ac:	1b 82       	std	Y+3, r1	; 0x03
	/*initialize all control bits  */
	for (int i=0 ; i < 6 ;i++ )
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	10 e0       	ldi	r17, 0x00	; 0
  b2:	12 c0       	rjmp	.+36     	; 0xd8 <S7egment_Init+0x46>
	{
		S7eg_PIN_CONFIG.pinS = Segment_Handler->S7eg_Control[i].Pin_Num ;	
  b4:	f8 01       	movw	r30, r16
  b6:	ee 0f       	add	r30, r30
  b8:	ff 1f       	adc	r31, r31
  ba:	e0 0f       	add	r30, r16
  bc:	f1 1f       	adc	r31, r17
  be:	ee 0d       	add	r30, r14
  c0:	ff 1d       	adc	r31, r15
  c2:	82 81       	ldd	r24, Z+2	; 0x02
  c4:	89 83       	std	Y+1, r24	; 0x01
		HAL_GPIO_INIT_PIN(Segment_Handler->S7eg_Control[i].Port,&S7eg_PIN_CONFIG);	
  c6:	be 01       	movw	r22, r28
  c8:	6f 5f       	subi	r22, 0xFF	; 255
  ca:	7f 4f       	sbci	r23, 0xFF	; 255
  cc:	80 81       	ld	r24, Z
  ce:	91 81       	ldd	r25, Z+1	; 0x01
  d0:	0e 94 42 01 	call	0x284	; 0x284 <HAL_GPIO_INIT_PIN>

	
	S7eg_PIN_CONFIG.mode = GPIO_MODE_OUTPUT ;
	S7eg_PIN_CONFIG.pull = GPIO_NOPULL ;
	/*initialize all control bits  */
	for (int i=0 ; i < 6 ;i++ )
  d4:	0f 5f       	subi	r16, 0xFF	; 255
  d6:	1f 4f       	sbci	r17, 0xFF	; 255
  d8:	06 30       	cpi	r16, 0x06	; 6
  da:	11 05       	cpc	r17, r1
  dc:	5c f3       	brlt	.-42     	; 0xb4 <S7egment_Init+0x22>
  de:	00 e0       	ldi	r16, 0x00	; 0
  e0:	10 e0       	ldi	r17, 0x00	; 0
  e2:	12 c0       	rjmp	.+36     	; 0x108 <S7egment_Init+0x76>


	/*initialize 7 segment BCD Bits */	
	for (int i=0 ; i < 4 ;i++ )
	{
		S7eg_PIN_CONFIG.pinS = Segment_Handler->S7eg_Bits[i].Pin_Num;
  e4:	f8 01       	movw	r30, r16
  e6:	ee 0f       	add	r30, r30
  e8:	ff 1f       	adc	r31, r31
  ea:	e0 0f       	add	r30, r16
  ec:	f1 1f       	adc	r31, r17
  ee:	ee 0d       	add	r30, r14
  f0:	ff 1d       	adc	r31, r15
  f2:	84 89       	ldd	r24, Z+20	; 0x14
  f4:	89 83       	std	Y+1, r24	; 0x01
		HAL_GPIO_INIT_PIN(Segment_Handler->S7eg_Bits[i].Port,&S7eg_PIN_CONFIG);
  f6:	be 01       	movw	r22, r28
  f8:	6f 5f       	subi	r22, 0xFF	; 255
  fa:	7f 4f       	sbci	r23, 0xFF	; 255
  fc:	82 89       	ldd	r24, Z+18	; 0x12
  fe:	93 89       	ldd	r25, Z+19	; 0x13
 100:	0e 94 42 01 	call	0x284	; 0x284 <HAL_GPIO_INIT_PIN>
		HAL_GPIO_INIT_PIN(Segment_Handler->S7eg_Control[i].Port,&S7eg_PIN_CONFIG);	
	}


	/*initialize 7 segment BCD Bits */	
	for (int i=0 ; i < 4 ;i++ )
 104:	0f 5f       	subi	r16, 0xFF	; 255
 106:	1f 4f       	sbci	r17, 0xFF	; 255
 108:	04 30       	cpi	r16, 0x04	; 4
 10a:	11 05       	cpc	r17, r1
 10c:	5c f3       	brlt	.-42     	; 0xe4 <S7egment_Init+0x52>
		HAL_GPIO_INIT_PIN(Segment_Handler->S7eg_Bits[i].Port,&S7eg_PIN_CONFIG);
	}	
	
	
	
}
 10e:	0f 90       	pop	r0
 110:	0f 90       	pop	r0
 112:	0f 90       	pop	r0
 114:	df 91       	pop	r29
 116:	cf 91       	pop	r28
 118:	1f 91       	pop	r17
 11a:	0f 91       	pop	r16
 11c:	ff 90       	pop	r15
 11e:	ef 90       	pop	r14
 120:	08 95       	ret

00000122 <S7egment_Write>:
void S7egment_Write(uint8_t Num_To_S7eg , uint8_t S7eg_Num,Seg7_Handler *  Segment_Handler)
{
 122:	df 92       	push	r13
 124:	ef 92       	push	r14
 126:	ff 92       	push	r15
 128:	0f 93       	push	r16
 12a:	1f 93       	push	r17
 12c:	cf 93       	push	r28
 12e:	df 93       	push	r29
 130:	06 2f       	mov	r16, r22
 132:	ea 01       	movw	r28, r20


	uint8_t High_Num=0,Low_Num=0 ;
	Low_Num = Num_To_S7eg % 10 ;
 134:	9d ec       	ldi	r25, 0xCD	; 205
 136:	89 9f       	mul	r24, r25
 138:	d1 2c       	mov	r13, r1
 13a:	11 24       	eor	r1, r1
 13c:	d6 94       	lsr	r13
 13e:	d6 94       	lsr	r13
 140:	d6 94       	lsr	r13
 142:	dd 0c       	add	r13, r13
 144:	9d 2d       	mov	r25, r13
 146:	99 0f       	add	r25, r25
 148:	99 0f       	add	r25, r25
 14a:	d9 0e       	add	r13, r25
 14c:	98 2f       	mov	r25, r24
 14e:	9d 19       	sub	r25, r13
 150:	d9 2e       	mov	r13, r25
	if (Num_To_S7eg == 0)
 152:	88 23       	and	r24, r24
 154:	b9 f0       	breq	.+46     	; 0x184 <S7egment_Write+0x62>
	{
		
	}
	else
	{
	Num_To_S7eg /= 10 ;
 156:	9d ec       	ldi	r25, 0xCD	; 205
 158:	89 9f       	mul	r24, r25
 15a:	81 2d       	mov	r24, r1
 15c:	11 24       	eor	r1, r1
 15e:	86 95       	lsr	r24
 160:	86 95       	lsr	r24
 162:	86 95       	lsr	r24
	if (Num_To_S7eg > 0){
 164:	89 f0       	breq	.+34     	; 0x188 <S7egment_Write+0x66>
		High_Num = Num_To_S7eg % 10 ;
 166:	1d ec       	ldi	r17, 0xCD	; 205
 168:	81 9f       	mul	r24, r17
 16a:	11 2d       	mov	r17, r1
 16c:	11 24       	eor	r1, r1
 16e:	16 95       	lsr	r17
 170:	16 95       	lsr	r17
 172:	16 95       	lsr	r17
 174:	11 0f       	add	r17, r17
 176:	91 2f       	mov	r25, r17
 178:	99 0f       	add	r25, r25
 17a:	99 0f       	add	r25, r25
 17c:	19 0f       	add	r17, r25
 17e:	81 1b       	sub	r24, r17
 180:	18 2f       	mov	r17, r24
 182:	03 c0       	rjmp	.+6      	; 0x18a <S7egment_Write+0x68>
}
void S7egment_Write(uint8_t Num_To_S7eg , uint8_t S7eg_Num,Seg7_Handler *  Segment_Handler)
{


	uint8_t High_Num=0,Low_Num=0 ;
 184:	10 e0       	ldi	r17, 0x00	; 0
 186:	01 c0       	rjmp	.+2      	; 0x18a <S7egment_Write+0x68>
	{
	Num_To_S7eg /= 10 ;
	if (Num_To_S7eg > 0){
		High_Num = Num_To_S7eg % 10 ;
		}else{
		High_Num = 0 ;
 188:	10 e0       	ldi	r17, 0x00	; 0
	}
	}

	for(int i =0 ;i<4 ;i++)
 18a:	e1 2c       	mov	r14, r1
 18c:	f1 2c       	mov	r15, r1
 18e:	18 c0       	rjmp	.+48     	; 0x1c0 <S7egment_Write+0x9e>
	HAL_GPIO_WRITEPIN(Segment_Handler->S7eg_Bits[i].Port,Segment_Handler->S7eg_Bits[i].Pin_Num,(High_Num>>i)&(0x01));
 190:	41 2f       	mov	r20, r17
 192:	50 e0       	ldi	r21, 0x00	; 0
 194:	0e 2c       	mov	r0, r14
 196:	02 c0       	rjmp	.+4      	; 0x19c <S7egment_Write+0x7a>
 198:	55 95       	asr	r21
 19a:	47 95       	ror	r20
 19c:	0a 94       	dec	r0
 19e:	e2 f7       	brpl	.-8      	; 0x198 <S7egment_Write+0x76>
 1a0:	41 70       	andi	r20, 0x01	; 1
 1a2:	f7 01       	movw	r30, r14
 1a4:	ee 0f       	add	r30, r30
 1a6:	ff 1f       	adc	r31, r31
 1a8:	ee 0d       	add	r30, r14
 1aa:	ff 1d       	adc	r31, r15
 1ac:	ec 0f       	add	r30, r28
 1ae:	fd 1f       	adc	r31, r29
 1b0:	64 89       	ldd	r22, Z+20	; 0x14
 1b2:	82 89       	ldd	r24, Z+18	; 0x12
 1b4:	93 89       	ldd	r25, Z+19	; 0x13
 1b6:	0e 94 63 01 	call	0x2c6	; 0x2c6 <HAL_GPIO_WRITEPIN>
		}else{
		High_Num = 0 ;
	}
	}

	for(int i =0 ;i<4 ;i++)
 1ba:	ef ef       	ldi	r30, 0xFF	; 255
 1bc:	ee 1a       	sub	r14, r30
 1be:	fe 0a       	sbc	r15, r30
 1c0:	f4 e0       	ldi	r31, 0x04	; 4
 1c2:	ef 16       	cp	r14, r31
 1c4:	f1 04       	cpc	r15, r1
 1c6:	24 f3       	brlt	.-56     	; 0x190 <S7egment_Write+0x6e>
	HAL_GPIO_WRITEPIN(Segment_Handler->S7eg_Bits[i].Port,Segment_Handler->S7eg_Bits[i].Pin_Num,(High_Num>>i)&(0x01));
	HAL_GPIO_WRITEPIN(Segment_Handler->S7eg_Control[S7eg_Num].Port,Segment_Handler->S7eg_Control[S7eg_Num].Pin_Num,1);
 1c8:	10 e0       	ldi	r17, 0x00	; 0
 1ca:	78 01       	movw	r14, r16
 1cc:	ee 0c       	add	r14, r14
 1ce:	ff 1c       	adc	r15, r15
 1d0:	e0 0e       	add	r14, r16
 1d2:	f1 1e       	adc	r15, r17
 1d4:	ec 0e       	add	r14, r28
 1d6:	fd 1e       	adc	r15, r29
 1d8:	41 e0       	ldi	r20, 0x01	; 1
 1da:	f7 01       	movw	r30, r14
 1dc:	62 81       	ldd	r22, Z+2	; 0x02
 1de:	80 81       	ld	r24, Z
 1e0:	91 81       	ldd	r25, Z+1	; 0x01
 1e2:	0e 94 63 01 	call	0x2c6	; 0x2c6 <HAL_GPIO_WRITEPIN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e6:	8f e3       	ldi	r24, 0x3F	; 63
 1e8:	9f e1       	ldi	r25, 0x1F	; 31
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <S7egment_Write+0xc8>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <S7egment_Write+0xce>
 1f0:	00 00       	nop
	_delay_ms(2);
	HAL_GPIO_WRITEPIN(Segment_Handler->S7eg_Control[S7eg_Num].Port,Segment_Handler->S7eg_Control[S7eg_Num].Pin_Num,0);
 1f2:	40 e0       	ldi	r20, 0x00	; 0
 1f4:	f7 01       	movw	r30, r14
 1f6:	62 81       	ldd	r22, Z+2	; 0x02
 1f8:	80 81       	ld	r24, Z
 1fa:	91 81       	ldd	r25, Z+1	; 0x01
 1fc:	0e 94 63 01 	call	0x2c6	; 0x2c6 <HAL_GPIO_WRITEPIN>

	
	for(int i =0 ;i<4 ;i++)
 200:	e1 2c       	mov	r14, r1
 202:	f1 2c       	mov	r15, r1
 204:	18 c0       	rjmp	.+48     	; 0x236 <S7egment_Write+0x114>
	HAL_GPIO_WRITEPIN(Segment_Handler->S7eg_Bits[i].Port,Segment_Handler->S7eg_Bits[i].Pin_Num,(Low_Num>>i)&(0x01));
 206:	4d 2d       	mov	r20, r13
 208:	50 e0       	ldi	r21, 0x00	; 0
 20a:	0e 2c       	mov	r0, r14
 20c:	02 c0       	rjmp	.+4      	; 0x212 <S7egment_Write+0xf0>
 20e:	55 95       	asr	r21
 210:	47 95       	ror	r20
 212:	0a 94       	dec	r0
 214:	e2 f7       	brpl	.-8      	; 0x20e <S7egment_Write+0xec>
 216:	41 70       	andi	r20, 0x01	; 1
 218:	f7 01       	movw	r30, r14
 21a:	ee 0f       	add	r30, r30
 21c:	ff 1f       	adc	r31, r31
 21e:	ee 0d       	add	r30, r14
 220:	ff 1d       	adc	r31, r15
 222:	ec 0f       	add	r30, r28
 224:	fd 1f       	adc	r31, r29
 226:	64 89       	ldd	r22, Z+20	; 0x14
 228:	82 89       	ldd	r24, Z+18	; 0x12
 22a:	93 89       	ldd	r25, Z+19	; 0x13
 22c:	0e 94 63 01 	call	0x2c6	; 0x2c6 <HAL_GPIO_WRITEPIN>
	HAL_GPIO_WRITEPIN(Segment_Handler->S7eg_Control[S7eg_Num].Port,Segment_Handler->S7eg_Control[S7eg_Num].Pin_Num,1);
	_delay_ms(2);
	HAL_GPIO_WRITEPIN(Segment_Handler->S7eg_Control[S7eg_Num].Port,Segment_Handler->S7eg_Control[S7eg_Num].Pin_Num,0);

	
	for(int i =0 ;i<4 ;i++)
 230:	ff ef       	ldi	r31, 0xFF	; 255
 232:	ef 1a       	sub	r14, r31
 234:	ff 0a       	sbc	r15, r31
 236:	84 e0       	ldi	r24, 0x04	; 4
 238:	e8 16       	cp	r14, r24
 23a:	f1 04       	cpc	r15, r1
 23c:	24 f3       	brlt	.-56     	; 0x206 <S7egment_Write+0xe4>
	HAL_GPIO_WRITEPIN(Segment_Handler->S7eg_Bits[i].Port,Segment_Handler->S7eg_Bits[i].Pin_Num,(Low_Num>>i)&(0x01));
	HAL_GPIO_WRITEPIN(Segment_Handler->S7eg_Control[S7eg_Num+1].Port,Segment_Handler->S7eg_Control[S7eg_Num+1].Pin_Num,1);
 23e:	0f 5f       	subi	r16, 0xFF	; 255
 240:	1f 4f       	sbci	r17, 0xFF	; 255
 242:	c8 01       	movw	r24, r16
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	08 0f       	add	r16, r24
 24a:	19 1f       	adc	r17, r25
 24c:	c0 0f       	add	r28, r16
 24e:	d1 1f       	adc	r29, r17
 250:	41 e0       	ldi	r20, 0x01	; 1
 252:	6a 81       	ldd	r22, Y+2	; 0x02
 254:	88 81       	ld	r24, Y
 256:	99 81       	ldd	r25, Y+1	; 0x01
 258:	0e 94 63 01 	call	0x2c6	; 0x2c6 <HAL_GPIO_WRITEPIN>
 25c:	ef e3       	ldi	r30, 0x3F	; 63
 25e:	fc e9       	ldi	r31, 0x9C	; 156
 260:	31 97       	sbiw	r30, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <S7egment_Write+0x13e>
 264:	00 c0       	rjmp	.+0      	; 0x266 <S7egment_Write+0x144>
 266:	00 00       	nop
	_delay_ms(10);	
	HAL_GPIO_WRITEPIN(Segment_Handler->S7eg_Control[S7eg_Num+1].Port,Segment_Handler->S7eg_Control[S7eg_Num+1].Pin_Num,0);
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	6a 81       	ldd	r22, Y+2	; 0x02
 26c:	88 81       	ld	r24, Y
 26e:	99 81       	ldd	r25, Y+1	; 0x01
 270:	0e 94 63 01 	call	0x2c6	; 0x2c6 <HAL_GPIO_WRITEPIN>
 274:	df 91       	pop	r29
 276:	cf 91       	pop	r28
 278:	1f 91       	pop	r17
 27a:	0f 91       	pop	r16
 27c:	ff 90       	pop	r15
 27e:	ef 90       	pop	r14
 280:	df 90       	pop	r13
 282:	08 95       	ret

00000284 <HAL_GPIO_INIT_PIN>:
	}
	else              /* if read pin is zero */
	{
		return GPIO_PIN_RESET ;
	}
}/* END_FUN HAL_GPIO_READPIN()*/
 284:	dc 01       	movw	r26, r24
 286:	fb 01       	movw	r30, r22
 288:	81 81       	ldd	r24, Z+1	; 0x01
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	99 f4       	brne	.+38     	; 0x2b4 <HAL_GPIO_INIT_PIN+0x30>
 28e:	80 81       	ld	r24, Z
 290:	11 96       	adiw	r26, 0x01	; 1
 292:	9c 91       	ld	r25, X
 294:	11 97       	sbiw	r26, 0x01	; 1
 296:	89 2b       	or	r24, r25
 298:	11 96       	adiw	r26, 0x01	; 1
 29a:	8c 93       	st	X, r24
 29c:	11 97       	sbiw	r26, 0x01	; 1
 29e:	82 81       	ldd	r24, Z+2	; 0x02
 2a0:	81 30       	cpi	r24, 0x01	; 1
 2a2:	81 f4       	brne	.+32     	; 0x2c4 <HAL_GPIO_INIT_PIN+0x40>
 2a4:	80 81       	ld	r24, Z
 2a6:	12 96       	adiw	r26, 0x02	; 2
 2a8:	9c 91       	ld	r25, X
 2aa:	12 97       	sbiw	r26, 0x02	; 2
 2ac:	89 2b       	or	r24, r25
 2ae:	12 96       	adiw	r26, 0x02	; 2
 2b0:	8c 93       	st	X, r24
 2b2:	08 95       	ret
 2b4:	90 81       	ld	r25, Z
 2b6:	90 95       	com	r25
 2b8:	11 96       	adiw	r26, 0x01	; 1
 2ba:	8c 91       	ld	r24, X
 2bc:	11 97       	sbiw	r26, 0x01	; 1
 2be:	98 23       	and	r25, r24
 2c0:	11 96       	adiw	r26, 0x01	; 1
 2c2:	9c 93       	st	X, r25
 2c4:	08 95       	ret

000002c6 <HAL_GPIO_WRITEPIN>:
 * param. : PIN_NUM the pin number must be one of GPIO_PIN_RESET or GPIO_PIN_SET
 * return : void  
 */
void HAL_GPIO_WRITEPIN(GPIO_TypeDef * PORT,uint8_t PIN_NUM,GPIO_PinState PIN_STATE)
{
	if(PIN_STATE != GPIO_PIN_RESET)
 2c6:	44 23       	and	r20, r20
 2c8:	29 f0       	breq	.+10     	; 0x2d4 <HAL_GPIO_WRITEPIN+0xe>
	{
		PORT->PORT_REG |= PIN_NUM ;
 2ca:	fc 01       	movw	r30, r24
 2cc:	22 81       	ldd	r18, Z+2	; 0x02
 2ce:	62 2b       	or	r22, r18
 2d0:	62 83       	std	Z+2, r22	; 0x02
 2d2:	08 95       	ret
	}
	else
	{
		PORT->PORT_REG &= ~(PIN_NUM);
 2d4:	60 95       	com	r22
 2d6:	fc 01       	movw	r30, r24
 2d8:	22 81       	ldd	r18, Z+2	; 0x02
 2da:	62 23       	and	r22, r18
 2dc:	62 83       	std	Z+2, r22	; 0x02
 2de:	08 95       	ret

000002e0 <I2C_INIT_FUN>:
I2C_STATUS HAL_I2C_Slave_Receive_IT(I2C_Handler_t * Handler  ,uint8_t * pRxData ,uint8_t DataSize )
{
	
	
	
}
 2e0:	8f 92       	push	r8
 2e2:	9f 92       	push	r9
 2e4:	af 92       	push	r10
 2e6:	bf 92       	push	r11
 2e8:	cf 92       	push	r12
 2ea:	df 92       	push	r13
 2ec:	ef 92       	push	r14
 2ee:	ff 92       	push	r15
 2f0:	0f 93       	push	r16
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	ec 01       	movw	r28, r24
 2f8:	28 81       	ld	r18, Y
 2fa:	39 81       	ldd	r19, Y+1	; 0x01
 2fc:	4a 81       	ldd	r20, Y+2	; 0x02
 2fe:	5b 81       	ldd	r21, Y+3	; 0x03
 300:	60 e0       	ldi	r22, 0x00	; 0
 302:	74 e2       	ldi	r23, 0x24	; 36
 304:	84 ef       	ldi	r24, 0xF4	; 244
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	0e 94 53 03 	call	0x6a6	; 0x6a6 <__udivmodsi4>
 30c:	49 01       	movw	r8, r18
 30e:	5a 01       	movw	r10, r20
 310:	39 2d       	mov	r19, r9
 312:	4a 2d       	mov	r20, r10
 314:	5b 2d       	mov	r21, r11
 316:	60 e0       	ldi	r22, 0x00	; 0
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
 31e:	a0 ef       	ldi	r26, 0xF0	; 240
 320:	0e 94 93 03 	call	0x726	; 0x726 <__adddi3_s8>
 324:	01 e0       	ldi	r16, 0x01	; 1
 326:	0e 94 77 03 	call	0x6ee	; 0x6ee <__lshrdi3>
 32a:	20 b9       	out	0x00, r18	; 0
 32c:	8c 81       	ldd	r24, Y+4	; 0x04
 32e:	82 b9       	out	0x02, r24	; 2
 330:	16 be       	out	0x36, r1	; 54
 332:	11 b8       	out	0x01, r1	; 1
 334:	8d 81       	ldd	r24, Y+5	; 0x05
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	29 f4       	brne	.+10     	; 0x344 <I2C_INIT_FUN+0x64>
 33a:	78 94       	sei
 33c:	86 b7       	in	r24, 0x36	; 54
 33e:	81 60       	ori	r24, 0x01	; 1
 340:	86 bf       	out	0x36, r24	; 54
 342:	03 c0       	rjmp	.+6      	; 0x34a <I2C_INIT_FUN+0x6a>
 344:	86 b7       	in	r24, 0x36	; 54
 346:	8e 7f       	andi	r24, 0xFE	; 254
 348:	86 bf       	out	0x36, r24	; 54
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	0f 91       	pop	r16
 350:	ff 90       	pop	r15
 352:	ef 90       	pop	r14
 354:	df 90       	pop	r13
 356:	cf 90       	pop	r12
 358:	bf 90       	pop	r11
 35a:	af 90       	pop	r10
 35c:	9f 90       	pop	r9
 35e:	8f 90       	pop	r8
 360:	08 95       	ret

00000362 <HAL_I2C_Mem_Write>:
 * param. @ : memAdd this is the internal memory address that you need to write data to 
 * param. @ : pRxData this is pointer to the buffer that hold the writing data 
 * param. @ : DataSize number of bytes that you need to write 
*/ 
I2C_STATUS HAL_I2C_Mem_Write(I2C_Handler_t * Handler ,uint8_t DevAdd,uint8_t MemAdd ,uint8_t * pTxData ,uint8_t DataSize )
{
 362:	0f 93       	push	r16
 364:	fc 01       	movw	r30, r24
	Handler->buffer = pTxData ;
 366:	37 83       	std	Z+7, r19	; 0x07
 368:	26 83       	std	Z+6, r18	; 0x06
	Handler->Size   = DataSize;
 36a:	00 87       	std	Z+8, r16	; 0x08
	
	
	I2C_EN_START();
 36c:	84 ea       	ldi	r24, 0xA4	; 164
 36e:	86 bf       	out	0x36, r24	; 54
	while(!(I2C->I2C_TWCR & 0x80));
 370:	06 b6       	in	r0, 0x36	; 54
 372:	07 fe       	sbrs	r0, 7
 374:	fd cf       	rjmp	.-6      	; 0x370 <HAL_I2C_Mem_Write+0xe>
	
	
	I2C->I2C_TWDR = DevAdd ;
 376:	63 b9       	out	0x03, r22	; 3
	I2C_EN();
 378:	84 e8       	ldi	r24, 0x84	; 132
 37a:	86 bf       	out	0x36, r24	; 54
	while(!(I2C->I2C_TWCR & 0x80));
 37c:	06 b6       	in	r0, 0x36	; 54
 37e:	07 fe       	sbrs	r0, 7
 380:	fd cf       	rjmp	.-6      	; 0x37c <HAL_I2C_Mem_Write+0x1a>

	I2C->I2C_TWDR = MemAdd;
 382:	43 b9       	out	0x03, r20	; 3
	I2C_EN();
 384:	84 e8       	ldi	r24, 0x84	; 132
 386:	86 bf       	out	0x36, r24	; 54
	while(!(I2C->I2C_TWCR & 0x80));
 388:	06 b6       	in	r0, 0x36	; 54
 38a:	07 fe       	sbrs	r0, 7
 38c:	fd cf       	rjmp	.-6      	; 0x388 <HAL_I2C_Mem_Write+0x26>
 38e:	0d c0       	rjmp	.+26     	; 0x3aa <HAL_I2C_Mem_Write+0x48>
	

	while(Handler->Size-- > 0)
	{
		I2C->I2C_TWDR = *(Handler->buffer++) ;
 390:	a6 81       	ldd	r26, Z+6	; 0x06
 392:	b7 81       	ldd	r27, Z+7	; 0x07
 394:	cd 01       	movw	r24, r26
 396:	01 96       	adiw	r24, 0x01	; 1
 398:	97 83       	std	Z+7, r25	; 0x07
 39a:	86 83       	std	Z+6, r24	; 0x06
 39c:	8c 91       	ld	r24, X
 39e:	83 b9       	out	0x03, r24	; 3
		I2C_EN();
 3a0:	84 e8       	ldi	r24, 0x84	; 132
 3a2:	86 bf       	out	0x36, r24	; 54
		while(!(I2C->I2C_TWCR & 0x80));
 3a4:	06 b6       	in	r0, 0x36	; 54
 3a6:	07 fe       	sbrs	r0, 7
 3a8:	fd cf       	rjmp	.-6      	; 0x3a4 <HAL_I2C_Mem_Write+0x42>
	I2C->I2C_TWDR = MemAdd;
	I2C_EN();
	while(!(I2C->I2C_TWCR & 0x80));
	

	while(Handler->Size-- > 0)
 3aa:	80 85       	ldd	r24, Z+8	; 0x08
 3ac:	9f ef       	ldi	r25, 0xFF	; 255
 3ae:	98 0f       	add	r25, r24
 3b0:	90 87       	std	Z+8, r25	; 0x08
 3b2:	81 11       	cpse	r24, r1
 3b4:	ed cf       	rjmp	.-38     	; 0x390 <HAL_I2C_Mem_Write+0x2e>
	{
		I2C->I2C_TWDR = *(Handler->buffer++) ;
		I2C_EN();
		while(!(I2C->I2C_TWCR & 0x80));
	}
	I2C_EN_STOP();
 3b6:	84 e9       	ldi	r24, 0x94	; 148
 3b8:	86 bf       	out	0x36, r24	; 54
	
	
}
 3ba:	0f 91       	pop	r16
 3bc:	08 95       	ret

000003be <HAL_I2C_Mem_Read>:
 * param. @ : memAdd this is the internal memory address that you need to read data from it 
 * param. @ : pRxData this is pointer to the buffer that will hold the reading data 
 * param. @ : DataSize number of bytes that you need to read 
*/ 
I2C_STATUS HAL_I2C_Mem_Read(I2C_Handler_t * Handler ,uint8_t DevAdd,uint8_t MemAdd ,uint8_t * pRxData ,uint8_t DataSize )
{
 3be:	0f 93       	push	r16
 3c0:	fc 01       	movw	r30, r24
	Handler->buffer = pRxData ;
 3c2:	37 83       	std	Z+7, r19	; 0x07
 3c4:	26 83       	std	Z+6, r18	; 0x06
	Handler->Size   = DataSize;
 3c6:	00 87       	std	Z+8, r16	; 0x08
	
	I2C_EN_START();
 3c8:	84 ea       	ldi	r24, 0xA4	; 164
 3ca:	86 bf       	out	0x36, r24	; 54
	while(!(I2C->I2C_TWCR & 0x80));
 3cc:	06 b6       	in	r0, 0x36	; 54
 3ce:	07 fe       	sbrs	r0, 7
 3d0:	fd cf       	rjmp	.-6      	; 0x3cc <HAL_I2C_Mem_Read+0xe>
	
	
	I2C->I2C_TWDR = DevAdd ;
 3d2:	63 b9       	out	0x03, r22	; 3
	I2C_EN();
 3d4:	84 e8       	ldi	r24, 0x84	; 132
 3d6:	86 bf       	out	0x36, r24	; 54
	while(!(I2C->I2C_TWCR & 0x80));
 3d8:	06 b6       	in	r0, 0x36	; 54
 3da:	07 fe       	sbrs	r0, 7
 3dc:	fd cf       	rjmp	.-6      	; 0x3d8 <HAL_I2C_Mem_Read+0x1a>

	I2C->I2C_TWDR = MemAdd;
 3de:	43 b9       	out	0x03, r20	; 3
	I2C_EN();
 3e0:	84 e8       	ldi	r24, 0x84	; 132
 3e2:	86 bf       	out	0x36, r24	; 54
	while(!(I2C->I2C_TWCR & 0x80));
 3e4:	06 b6       	in	r0, 0x36	; 54
 3e6:	07 fe       	sbrs	r0, 7
 3e8:	fd cf       	rjmp	.-6      	; 0x3e4 <HAL_I2C_Mem_Read+0x26>
	
	
	I2C_EN_START();
 3ea:	84 ea       	ldi	r24, 0xA4	; 164
 3ec:	86 bf       	out	0x36, r24	; 54
	while(!(I2C->I2C_TWCR & 0x80));	
 3ee:	06 b6       	in	r0, 0x36	; 54
 3f0:	07 fe       	sbrs	r0, 7
 3f2:	fd cf       	rjmp	.-6      	; 0x3ee <HAL_I2C_Mem_Read+0x30>

	I2C->I2C_TWDR = DevAdd | 1 ;
 3f4:	61 60       	ori	r22, 0x01	; 1
 3f6:	63 b9       	out	0x03, r22	; 3
	I2C_EN();
 3f8:	84 e8       	ldi	r24, 0x84	; 132
 3fa:	86 bf       	out	0x36, r24	; 54
	while(!(I2C->I2C_TWCR & 0x80));
 3fc:	06 b6       	in	r0, 0x36	; 54
 3fe:	07 fe       	sbrs	r0, 7
 400:	fd cf       	rjmp	.-6      	; 0x3fc <HAL_I2C_Mem_Read+0x3e>
 402:	0d c0       	rjmp	.+26     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
	
		
	while(Handler->Size-- > 0)
	{
		I2C_EN_ACK();
 404:	84 ec       	ldi	r24, 0xC4	; 196
 406:	86 bf       	out	0x36, r24	; 54
		while(!(I2C->I2C_TWCR & 0x80));
 408:	06 b6       	in	r0, 0x36	; 54
 40a:	07 fe       	sbrs	r0, 7
 40c:	fd cf       	rjmp	.-6      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
		*(Handler->buffer++) = I2C->I2C_TWDR ;
 40e:	a6 81       	ldd	r26, Z+6	; 0x06
 410:	b7 81       	ldd	r27, Z+7	; 0x07
 412:	cd 01       	movw	r24, r26
 414:	01 96       	adiw	r24, 0x01	; 1
 416:	97 83       	std	Z+7, r25	; 0x07
 418:	86 83       	std	Z+6, r24	; 0x06
 41a:	83 b1       	in	r24, 0x03	; 3
 41c:	8c 93       	st	X, r24
	I2C->I2C_TWDR = DevAdd | 1 ;
	I2C_EN();
	while(!(I2C->I2C_TWCR & 0x80));
	
		
	while(Handler->Size-- > 0)
 41e:	80 85       	ldd	r24, Z+8	; 0x08
 420:	9f ef       	ldi	r25, 0xFF	; 255
 422:	98 0f       	add	r25, r24
 424:	90 87       	std	Z+8, r25	; 0x08
 426:	81 11       	cpse	r24, r1
 428:	ed cf       	rjmp	.-38     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
	{
		I2C_EN_ACK();
		while(!(I2C->I2C_TWCR & 0x80));
		*(Handler->buffer++) = I2C->I2C_TWDR ;
	}
	I2C_EN_NACK();
 42a:	84 e8       	ldi	r24, 0x84	; 132
 42c:	86 bf       	out	0x36, r24	; 54
	while(!(I2C->I2C_TWCR & 0x80));	
 42e:	06 b6       	in	r0, 0x36	; 54
 430:	07 fe       	sbrs	r0, 7
 432:	fd cf       	rjmp	.-6      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
	I2C_EN_STOP();
 434:	84 e9       	ldi	r24, 0x94	; 148
 436:	86 bf       	out	0x36, r24	; 54
		
}
 438:	0f 91       	pop	r16
 43a:	08 95       	ret

0000043c <main>:
};


int main(void)
{
	DS1305_Init();
 43c:	0e 94 45 02 	call	0x48a	; 0x48a <DS1305_Init>
	S7egment_Init(&S7egHendler);
 440:	80 e6       	ldi	r24, 0x60	; 96
 442:	90 e0       	ldi	r25, 0x00	; 0
 444:	0e 94 49 00 	call	0x92	; 0x92 <S7egment_Init>
	RTC_Set_Time(&Time);
 448:	88 e8       	ldi	r24, 0x88	; 136
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 ce 02 	call	0x59c	; 0x59c <RTC_Set_Time>
	RTC_Set_Date(&Date);
 450:	8e e7       	ldi	r24, 0x7E	; 126
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	0e 94 16 03 	call	0x62c	; 0x62c <RTC_Set_Date>


	/* Replace with your application code */
	while (1)
	{
		RTC_Get_Time(&gettime);
 458:	83 e8       	ldi	r24, 0x83	; 131
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0e 94 57 02 	call	0x4ae	; 0x4ae <RTC_Get_Time>
		
		
		S7egment_Write(gettime.Hours  , 0,&S7egHendler);
 460:	c3 e8       	ldi	r28, 0x83	; 131
 462:	d0 e0       	ldi	r29, 0x00	; 0
 464:	40 e6       	ldi	r20, 0x60	; 96
 466:	50 e0       	ldi	r21, 0x00	; 0
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	8a 81       	ldd	r24, Y+2	; 0x02
 46c:	0e 94 91 00 	call	0x122	; 0x122 <S7egment_Write>
		S7egment_Write(gettime.Minutes ,2,&S7egHendler);
 470:	40 e6       	ldi	r20, 0x60	; 96
 472:	50 e0       	ldi	r21, 0x00	; 0
 474:	62 e0       	ldi	r22, 0x02	; 2
 476:	89 81       	ldd	r24, Y+1	; 0x01
 478:	0e 94 91 00 	call	0x122	; 0x122 <S7egment_Write>
		S7egment_Write(gettime.Seconds ,4,&S7egHendler);
 47c:	40 e6       	ldi	r20, 0x60	; 96
 47e:	50 e0       	ldi	r21, 0x00	; 0
 480:	64 e0       	ldi	r22, 0x04	; 4
 482:	88 81       	ld	r24, Y
 484:	0e 94 91 00 	call	0x122	; 0x122 <S7egment_Write>
 488:	e7 cf       	rjmp	.-50     	; 0x458 <main+0x1c>

0000048a <DS1305_Init>:
				Alarm->Hours =   TempAlarm.Hours;
				
			}
			Alarm->Day   =TempAlarm.Day ;
	
}
 48a:	8d e8       	ldi	r24, 0x8D	; 141
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 70 01 	call	0x2e0	; 0x2e0 <I2C_INIT_FUN>
 492:	08 95       	ret

00000494 <Convert_BCD_To_BIN>:
 494:	38 2f       	mov	r19, r24
 496:	3f 70       	andi	r19, 0x0F	; 15
 498:	98 2f       	mov	r25, r24
 49a:	92 95       	swap	r25
 49c:	9f 70       	andi	r25, 0x0F	; 15
 49e:	99 0f       	add	r25, r25
 4a0:	29 2f       	mov	r18, r25
 4a2:	22 0f       	add	r18, r18
 4a4:	22 0f       	add	r18, r18
 4a6:	89 2f       	mov	r24, r25
 4a8:	82 0f       	add	r24, r18
 4aa:	83 0f       	add	r24, r19
 4ac:	08 95       	ret

000004ae <RTC_Get_Time>:
 4ae:	ef 92       	push	r14
 4b0:	ff 92       	push	r15
 4b2:	0f 93       	push	r16
 4b4:	1f 93       	push	r17
 4b6:	cf 93       	push	r28
 4b8:	df 93       	push	r29
 4ba:	00 d0       	rcall	.+0      	; 0x4bc <RTC_Get_Time+0xe>
 4bc:	00 d0       	rcall	.+0      	; 0x4be <RTC_Get_Time+0x10>
 4be:	1f 92       	push	r1
 4c0:	cd b7       	in	r28, 0x3d	; 61
 4c2:	de b7       	in	r29, 0x3e	; 62
 4c4:	7c 01       	movw	r14, r24
 4c6:	03 e0       	ldi	r16, 0x03	; 3
 4c8:	9e 01       	movw	r18, r28
 4ca:	2f 5f       	subi	r18, 0xFF	; 255
 4cc:	3f 4f       	sbci	r19, 0xFF	; 255
 4ce:	40 e0       	ldi	r20, 0x00	; 0
 4d0:	60 ed       	ldi	r22, 0xD0	; 208
 4d2:	8d e8       	ldi	r24, 0x8D	; 141
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 df 01 	call	0x3be	; 0x3be <HAL_I2C_Mem_Read>
 4da:	8b 81       	ldd	r24, Y+3	; 0x03
 4dc:	98 2f       	mov	r25, r24
 4de:	90 74       	andi	r25, 0x40	; 64
 4e0:	86 fd       	sbrc	r24, 6
 4e2:	05 c0       	rjmp	.+10     	; 0x4ee <RTC_Get_Time+0x40>
 4e4:	f7 01       	movw	r30, r14
 4e6:	82 81       	ldd	r24, Z+2	; 0x02
 4e8:	8f 77       	andi	r24, 0x7F	; 127
 4ea:	82 83       	std	Z+2, r24	; 0x02
 4ec:	0b c0       	rjmp	.+22     	; 0x504 <RTC_Get_Time+0x56>
 4ee:	91 11       	cpse	r25, r1
 4f0:	04 c0       	rjmp	.+8      	; 0x4fa <RTC_Get_Time+0x4c>
 4f2:	91 e0       	ldi	r25, 0x01	; 1
 4f4:	f7 01       	movw	r30, r14
 4f6:	94 83       	std	Z+4, r25	; 0x04
 4f8:	03 c0       	rjmp	.+6      	; 0x500 <RTC_Get_Time+0x52>
 4fa:	92 e0       	ldi	r25, 0x02	; 2
 4fc:	f7 01       	movw	r30, r14
 4fe:	94 83       	std	Z+4, r25	; 0x04
 500:	8f 71       	andi	r24, 0x1F	; 31
 502:	8b 83       	std	Y+3, r24	; 0x03
 504:	8a 81       	ldd	r24, Y+2	; 0x02
 506:	08 2f       	mov	r16, r24
 508:	0f 77       	andi	r16, 0x7F	; 127
 50a:	89 81       	ldd	r24, Y+1	; 0x01
 50c:	18 2f       	mov	r17, r24
 50e:	1f 77       	andi	r17, 0x7F	; 127
 510:	f7 01       	movw	r30, r14
 512:	83 81       	ldd	r24, Z+3	; 0x03
 514:	82 30       	cpi	r24, 0x02	; 2
 516:	81 f4       	brne	.+32     	; 0x538 <RTC_Get_Time+0x8a>
 518:	8b 81       	ldd	r24, Y+3	; 0x03
 51a:	0e 94 4a 02 	call	0x494	; 0x494 <Convert_BCD_To_BIN>
 51e:	f7 01       	movw	r30, r14
 520:	82 83       	std	Z+2, r24	; 0x02
 522:	80 2f       	mov	r24, r16
 524:	0e 94 4a 02 	call	0x494	; 0x494 <Convert_BCD_To_BIN>
 528:	f7 01       	movw	r30, r14
 52a:	81 83       	std	Z+1, r24	; 0x01
 52c:	81 2f       	mov	r24, r17
 52e:	0e 94 4a 02 	call	0x494	; 0x494 <Convert_BCD_To_BIN>
 532:	f7 01       	movw	r30, r14
 534:	80 83       	st	Z, r24
 536:	05 c0       	rjmp	.+10     	; 0x542 <RTC_Get_Time+0x94>
 538:	8b 81       	ldd	r24, Y+3	; 0x03
 53a:	f7 01       	movw	r30, r14
 53c:	82 83       	std	Z+2, r24	; 0x02
 53e:	01 83       	std	Z+1, r16	; 0x01
 540:	10 83       	st	Z, r17
 542:	0f 90       	pop	r0
 544:	0f 90       	pop	r0
 546:	0f 90       	pop	r0
 548:	0f 90       	pop	r0
 54a:	0f 90       	pop	r0
 54c:	df 91       	pop	r29
 54e:	cf 91       	pop	r28
 550:	1f 91       	pop	r17
 552:	0f 91       	pop	r16
 554:	ff 90       	pop	r15
 556:	ef 90       	pop	r14
 558:	08 95       	ret

0000055a <Convert_BIN_To_BCD>:
{
	
	uint8_t BCD_Low =0;
	
	
	if(BIN_Num > 99u) // check if the wrong data send from the Application
 55a:	84 36       	cpi	r24, 0x64	; 100
 55c:	d8 f4       	brcc	.+54     	; 0x594 <Convert_BIN_To_BCD+0x3a>
	return 0x99u;
	if(BIN_Num == 0)
 55e:	88 23       	and	r24, r24
 560:	d9 f0       	breq	.+54     	; 0x598 <Convert_BIN_To_BCD+0x3e>
	return 0;
	
	BCD_Low = BIN_Num % 10u ;
 562:	9d ec       	ldi	r25, 0xCD	; 205
 564:	89 9f       	mul	r24, r25
 566:	91 2d       	mov	r25, r1
 568:	11 24       	eor	r1, r1
 56a:	49 2f       	mov	r20, r25
 56c:	46 95       	lsr	r20
 56e:	46 95       	lsr	r20
 570:	46 95       	lsr	r20
 572:	44 0f       	add	r20, r20
 574:	24 2f       	mov	r18, r20
 576:	22 0f       	add	r18, r18
 578:	22 0f       	add	r18, r18
 57a:	42 0f       	add	r20, r18
 57c:	84 1b       	sub	r24, r20
 57e:	48 2f       	mov	r20, r24
	BIN_Num /= 10u ;
 580:	96 95       	lsr	r25
 582:	96 95       	lsr	r25
 584:	96 95       	lsr	r25
	return (BIN_Num <<4u | BCD_Low );
 586:	80 e1       	ldi	r24, 0x10	; 16
 588:	98 9f       	mul	r25, r24
 58a:	90 01       	movw	r18, r0
 58c:	11 24       	eor	r1, r1
 58e:	84 2f       	mov	r24, r20
 590:	82 2b       	or	r24, r18
 592:	08 95       	ret
	
	uint8_t BCD_Low =0;
	
	
	if(BIN_Num > 99u) // check if the wrong data send from the Application
	return 0x99u;
 594:	89 e9       	ldi	r24, 0x99	; 153
 596:	08 95       	ret
	if(BIN_Num == 0)
	return 0;
 598:	80 e0       	ldi	r24, 0x00	; 0
	BIN_Num /= 10u ;
	return (BIN_Num <<4u | BCD_Low );
	
	
	
}
 59a:	08 95       	ret

0000059c <RTC_Set_Time>:
/* brief : this function used to set DS1305 Time 
 * param : Time_Typedef handler struct pointer hold all Time informations 
 * return : void 
 */
void RTC_Set_Time(Time_Typedef * Time)
{
 59c:	0f 93       	push	r16
 59e:	1f 93       	push	r17
 5a0:	cf 93       	push	r28
 5a2:	df 93       	push	r29
 5a4:	00 d0       	rcall	.+0      	; 0x5a6 <RTC_Set_Time+0xa>
 5a6:	00 d0       	rcall	.+0      	; 0x5a8 <RTC_Set_Time+0xc>
 5a8:	1f 92       	push	r1
 5aa:	cd b7       	in	r28, 0x3d	; 61
 5ac:	de b7       	in	r29, 0x3e	; 62
 5ae:	8c 01       	movw	r16, r24
	/* temp handler to hold all actual timing info that will send to DS1305 */
	Time_Typedef TempTime ;
	
	/* check if any need to convert to BCD formate */
	if(Time->RTC_Time_Format == RTC_Format_BIN)
 5b0:	fc 01       	movw	r30, r24
 5b2:	83 81       	ldd	r24, Z+3	; 0x03
 5b4:	82 30       	cpi	r24, 0x02	; 2
 5b6:	79 f4       	brne	.+30     	; 0x5d6 <RTC_Set_Time+0x3a>
	{
		TempTime.Hours   = Convert_BIN_To_BCD(Time->Hours);
 5b8:	82 81       	ldd	r24, Z+2	; 0x02
 5ba:	0e 94 ad 02 	call	0x55a	; 0x55a <Convert_BIN_To_BCD>
 5be:	8b 83       	std	Y+3, r24	; 0x03
		TempTime.Minutes = Convert_BIN_To_BCD(Time->Minutes);
 5c0:	f8 01       	movw	r30, r16
 5c2:	81 81       	ldd	r24, Z+1	; 0x01
 5c4:	0e 94 ad 02 	call	0x55a	; 0x55a <Convert_BIN_To_BCD>
 5c8:	8a 83       	std	Y+2, r24	; 0x02
		TempTime.Seconds = Convert_BIN_To_BCD(Time->Seconds);							
 5ca:	f8 01       	movw	r30, r16
 5cc:	80 81       	ld	r24, Z
 5ce:	0e 94 ad 02 	call	0x55a	; 0x55a <Convert_BIN_To_BCD>
 5d2:	89 83       	std	Y+1, r24	; 0x01
 5d4:	0a c0       	rjmp	.+20     	; 0x5ea <RTC_Set_Time+0x4e>
	}else{
		TempTime.Hours   = Time->Hours	  & 0x7f ;
 5d6:	f8 01       	movw	r30, r16
 5d8:	82 81       	ldd	r24, Z+2	; 0x02
 5da:	8f 77       	andi	r24, 0x7F	; 127
 5dc:	8b 83       	std	Y+3, r24	; 0x03
		TempTime.Minutes = Time->Minutes & 0x7f ;
 5de:	81 81       	ldd	r24, Z+1	; 0x01
 5e0:	8f 77       	andi	r24, 0x7F	; 127
 5e2:	8a 83       	std	Y+2, r24	; 0x02
		TempTime.Seconds = Time->Seconds & 0x7f ;
 5e4:	80 81       	ld	r24, Z
 5e6:	8f 77       	andi	r24, 0x7F	; 127
 5e8:	89 83       	std	Y+1, r24	; 0x01
	}

if(Time->RTC_AM_PM != 0u)
 5ea:	f8 01       	movw	r30, r16
 5ec:	84 81       	ldd	r24, Z+4	; 0x04
 5ee:	88 23       	and	r24, r24
 5f0:	49 f0       	breq	.+18     	; 0x604 <RTC_Set_Time+0x68>
{
	
	if(Time->RTC_AM_PM == RTC_Time_PM )	// PM logic high & AM logic low
 5f2:	82 30       	cpi	r24, 0x02	; 2
 5f4:	21 f4       	brne	.+8      	; 0x5fe <RTC_Set_Time+0x62>
	TempTime.Hours |= 0x40u ;
 5f6:	8b 81       	ldd	r24, Y+3	; 0x03
 5f8:	80 64       	ori	r24, 0x40	; 64
 5fa:	8b 83       	std	Y+3, r24	; 0x03
 5fc:	03 c0       	rjmp	.+6      	; 0x604 <RTC_Set_Time+0x68>
	else
	TempTime.Hours |= 0x60u ;
 5fe:	8b 81       	ldd	r24, Y+3	; 0x03
 600:	80 66       	ori	r24, 0x60	; 96
 602:	8b 83       	std	Y+3, r24	; 0x03
}


/*here we'll send all Time information to DS1305 Module */
HAL_I2C_Mem_Write(&I2cHandler,0xd0,0x00,&TempTime.Seconds,3);
 604:	03 e0       	ldi	r16, 0x03	; 3
 606:	9e 01       	movw	r18, r28
 608:	2f 5f       	subi	r18, 0xFF	; 255
 60a:	3f 4f       	sbci	r19, 0xFF	; 255
 60c:	40 e0       	ldi	r20, 0x00	; 0
 60e:	60 ed       	ldi	r22, 0xD0	; 208
 610:	8d e8       	ldi	r24, 0x8D	; 141
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	0e 94 b1 01 	call	0x362	; 0x362 <HAL_I2C_Mem_Write>
	
	
	
}/* End_Of RTC_Set_Time() */
 618:	0f 90       	pop	r0
 61a:	0f 90       	pop	r0
 61c:	0f 90       	pop	r0
 61e:	0f 90       	pop	r0
 620:	0f 90       	pop	r0
 622:	df 91       	pop	r29
 624:	cf 91       	pop	r28
 626:	1f 91       	pop	r17
 628:	0f 91       	pop	r16
 62a:	08 95       	ret

0000062c <RTC_Set_Date>:
/* brief : this function used to Set DS1305 Current Date 
 * param : Date_Typedef handler struct pointer hold all Date informations that will send from DS1305 
 * return : void 
 */
void RTC_Set_Date(Date_Typedef * Date)
{
 62c:	0f 93       	push	r16
 62e:	1f 93       	push	r17
 630:	cf 93       	push	r28
 632:	df 93       	push	r29
 634:	00 d0       	rcall	.+0      	; 0x636 <RTC_Set_Date+0xa>
 636:	00 d0       	rcall	.+0      	; 0x638 <RTC_Set_Date+0xc>
 638:	1f 92       	push	r1
 63a:	cd b7       	in	r28, 0x3d	; 61
 63c:	de b7       	in	r29, 0x3e	; 62
 63e:	8c 01       	movw	r16, r24
	Date_Typedef TempDate ;
	
	/* check the format of the data that send by the user in Date_Typedef Var */
	if(Date->RTC_Time_Format == RTC_Format_BIN)
 640:	fc 01       	movw	r30, r24
 642:	84 81       	ldd	r24, Z+4	; 0x04
 644:	82 30       	cpi	r24, 0x02	; 2
 646:	79 f4       	brne	.+30     	; 0x666 <RTC_Set_Date+0x3a>
	{
		
		TempDate.DayDate   = Convert_BIN_To_BCD(Date->DayDate);
 648:	81 81       	ldd	r24, Z+1	; 0x01
 64a:	0e 94 ad 02 	call	0x55a	; 0x55a <Convert_BIN_To_BCD>
 64e:	8a 83       	std	Y+2, r24	; 0x02
		TempDate.Year = Convert_BIN_To_BCD(Date->Year);
 650:	f8 01       	movw	r30, r16
 652:	83 81       	ldd	r24, Z+3	; 0x03
 654:	0e 94 ad 02 	call	0x55a	; 0x55a <Convert_BIN_To_BCD>
 658:	8c 83       	std	Y+4, r24	; 0x04
		TempDate.month = Convert_BIN_To_BCD(Date->month);
 65a:	f8 01       	movw	r30, r16
 65c:	82 81       	ldd	r24, Z+2	; 0x02
 65e:	0e 94 ad 02 	call	0x55a	; 0x55a <Convert_BIN_To_BCD>
 662:	8b 83       	std	Y+3, r24	; 0x03
 664:	09 c0       	rjmp	.+18     	; 0x678 <RTC_Set_Date+0x4c>
		
		}else{
		TempDate.DayDate   = Date->DayDate   & 0x3f ;
 666:	f8 01       	movw	r30, r16
 668:	81 81       	ldd	r24, Z+1	; 0x01
 66a:	8f 73       	andi	r24, 0x3F	; 63
 66c:	8a 83       	std	Y+2, r24	; 0x02
		TempDate.Year  = Date->Year  ;
 66e:	83 81       	ldd	r24, Z+3	; 0x03
 670:	8c 83       	std	Y+4, r24	; 0x04
		TempDate.month = Date->month & 0x3f ;
 672:	82 81       	ldd	r24, Z+2	; 0x02
 674:	8f 73       	andi	r24, 0x3F	; 63
 676:	8b 83       	std	Y+3, r24	; 0x03
		}
	TempDate.Day = Date->Day;
 678:	f8 01       	movw	r30, r16
 67a:	80 81       	ld	r24, Z
 67c:	89 83       	std	Y+1, r24	; 0x01
	
	/* here we'll set up the data For Ds1305 Module */
	HAL_I2C_Mem_Write(&I2cHandler,0xd0,0x03,&TempDate.Day,4);
 67e:	04 e0       	ldi	r16, 0x04	; 4
 680:	9e 01       	movw	r18, r28
 682:	2f 5f       	subi	r18, 0xFF	; 255
 684:	3f 4f       	sbci	r19, 0xFF	; 255
 686:	43 e0       	ldi	r20, 0x03	; 3
 688:	60 ed       	ldi	r22, 0xD0	; 208
 68a:	8d e8       	ldi	r24, 0x8D	; 141
 68c:	90 e0       	ldi	r25, 0x00	; 0
 68e:	0e 94 b1 01 	call	0x362	; 0x362 <HAL_I2C_Mem_Write>

	
}/* End_Of RTC_Set_Time() */
 692:	0f 90       	pop	r0
 694:	0f 90       	pop	r0
 696:	0f 90       	pop	r0
 698:	0f 90       	pop	r0
 69a:	0f 90       	pop	r0
 69c:	df 91       	pop	r29
 69e:	cf 91       	pop	r28
 6a0:	1f 91       	pop	r17
 6a2:	0f 91       	pop	r16
 6a4:	08 95       	ret

000006a6 <__udivmodsi4>:
 6a6:	a1 e2       	ldi	r26, 0x21	; 33
 6a8:	1a 2e       	mov	r1, r26
 6aa:	aa 1b       	sub	r26, r26
 6ac:	bb 1b       	sub	r27, r27
 6ae:	fd 01       	movw	r30, r26
 6b0:	0d c0       	rjmp	.+26     	; 0x6cc <__udivmodsi4_ep>

000006b2 <__udivmodsi4_loop>:
 6b2:	aa 1f       	adc	r26, r26
 6b4:	bb 1f       	adc	r27, r27
 6b6:	ee 1f       	adc	r30, r30
 6b8:	ff 1f       	adc	r31, r31
 6ba:	a2 17       	cp	r26, r18
 6bc:	b3 07       	cpc	r27, r19
 6be:	e4 07       	cpc	r30, r20
 6c0:	f5 07       	cpc	r31, r21
 6c2:	20 f0       	brcs	.+8      	; 0x6cc <__udivmodsi4_ep>
 6c4:	a2 1b       	sub	r26, r18
 6c6:	b3 0b       	sbc	r27, r19
 6c8:	e4 0b       	sbc	r30, r20
 6ca:	f5 0b       	sbc	r31, r21

000006cc <__udivmodsi4_ep>:
 6cc:	66 1f       	adc	r22, r22
 6ce:	77 1f       	adc	r23, r23
 6d0:	88 1f       	adc	r24, r24
 6d2:	99 1f       	adc	r25, r25
 6d4:	1a 94       	dec	r1
 6d6:	69 f7       	brne	.-38     	; 0x6b2 <__udivmodsi4_loop>
 6d8:	60 95       	com	r22
 6da:	70 95       	com	r23
 6dc:	80 95       	com	r24
 6de:	90 95       	com	r25
 6e0:	9b 01       	movw	r18, r22
 6e2:	ac 01       	movw	r20, r24
 6e4:	bd 01       	movw	r22, r26
 6e6:	cf 01       	movw	r24, r30
 6e8:	08 95       	ret

000006ea <__ashrdi3>:
 6ea:	97 fb       	bst	r25, 7
 6ec:	10 f8       	bld	r1, 0

000006ee <__lshrdi3>:
 6ee:	16 94       	lsr	r1
 6f0:	00 08       	sbc	r0, r0
 6f2:	0f 93       	push	r16
 6f4:	08 30       	cpi	r16, 0x08	; 8
 6f6:	98 f0       	brcs	.+38     	; 0x71e <__lshrdi3+0x30>
 6f8:	08 50       	subi	r16, 0x08	; 8
 6fa:	23 2f       	mov	r18, r19
 6fc:	34 2f       	mov	r19, r20
 6fe:	45 2f       	mov	r20, r21
 700:	56 2f       	mov	r21, r22
 702:	67 2f       	mov	r22, r23
 704:	78 2f       	mov	r23, r24
 706:	89 2f       	mov	r24, r25
 708:	90 2d       	mov	r25, r0
 70a:	f4 cf       	rjmp	.-24     	; 0x6f4 <__lshrdi3+0x6>
 70c:	05 94       	asr	r0
 70e:	97 95       	ror	r25
 710:	87 95       	ror	r24
 712:	77 95       	ror	r23
 714:	67 95       	ror	r22
 716:	57 95       	ror	r21
 718:	47 95       	ror	r20
 71a:	37 95       	ror	r19
 71c:	27 95       	ror	r18
 71e:	0a 95       	dec	r16
 720:	aa f7       	brpl	.-22     	; 0x70c <__lshrdi3+0x1e>
 722:	0f 91       	pop	r16
 724:	08 95       	ret

00000726 <__adddi3_s8>:
 726:	00 24       	eor	r0, r0
 728:	a7 fd       	sbrc	r26, 7
 72a:	00 94       	com	r0
 72c:	2a 0f       	add	r18, r26
 72e:	30 1d       	adc	r19, r0
 730:	40 1d       	adc	r20, r0
 732:	50 1d       	adc	r21, r0
 734:	60 1d       	adc	r22, r0
 736:	70 1d       	adc	r23, r0
 738:	80 1d       	adc	r24, r0
 73a:	90 1d       	adc	r25, r0
 73c:	08 95       	ret

0000073e <_exit>:
 73e:	f8 94       	cli

00000740 <__stop_program>:
 740:	ff cf       	rjmp	.-2      	; 0x740 <__stop_program>
